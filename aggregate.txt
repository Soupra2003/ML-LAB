1.   use ecommerce 
switched to db ecommerce 
db["Product"].find() 
db.Product.insertMany([]) 
MongoInvalidArgumentError: Invalid BulkOperation, Batch cannot be empty 
db.Product.insertMany([ 
{_id:1, name:"Asus laptop", price:56000}, 
{_id:2, name:"samsung s24", price:57000}, 
{_id:3, name:"vivo x200",  
price:65000}, 
{_id:4, name:"samsung s24Fe", price:45000} 
]) 
db.Customer.insertMany([ 
{ _id: 101, name: "souvik", email: "souvik@gmail.com" }, 
{ _id: 102, name: "Sabuj", email: "sabuj@gmail.com" }, 
{ _id: 103, name: "Ayan", email: "Ayan@gmail.com" }, 
{ _id: 104, name: "Aditi", email: "Aditi@gamil.com" }, 
{ _id: 105, name: "Santi", email: "Santi@gmail.com" } 
]); 

2. db.Order.find( 
{ order_date: { $gt: ISODate("2023-11-05T00:00:00Z") } }, 
{ _id: 1, customer_ID: 1, product_ID: 1 } 
);

3. db.Order.aggregate([ 
    {   $group: { 
            _id: "$product_ID", 
            total_quantity_sold: { $sum: "$quantity" } 
        } 
    } 
]); 

4. db.Order.aggregate([{ 
        $group: { _id: "$product_ID", total_quantity_sold:  
{ $sum: "$quantity" } } }, 
  {$lookup: {from: "Product", localField: "_id", 
   foreignField: "_id",as: "productDetails"} 
    }, 
    { $unwind: "$productDetails" }, { $project: { _id: 0, 
            product_name: "$productDetails.name", 
            total_quantity_sold: 1  }  } ]);

5. db.Order.aggregate([ { $group: { 
            _id: "$product_ID", 
            total_quantity_sold: { $sum: "$quantity" } } 
    },  {  $lookup: { 
            from: "Product", 
            localField: "_id", 
            foreignField: "_id", 
            as: "productDetails"   } }, 
    {  $unwind: "$productDetails"}, 
    { $project: {_id: 0, 
            product_name: "$productDetails.name", 
            total_quantity_sold: 1 } }, 
    { $sort: { total_quantity_sold: -1 } } 
]);

6.
 db.Order.aggregate([    {   $lookup: {    from: "Customer",  
localField: "customer_ID",   foreignField: "_id",  as 
"customerDetails"  } }, {   $unwind: "$customerDetails"  
}, {$lookup: { from: "Product",  collection  localField: 
"product_ID",   foreignField: "_id", as: "productDetails" 
}  }, { $unwind: "$productDetails"  },  {  $project: { 
_id: 0,   order_ID: "$_id",customer_name: 
"$customerDetails.name",  customer_email: 
$customerDetails.email",  product_name: 
"$productDetails.name",   category: 
"$productDetails.category",  price: "$productDetails.price", 
quantity: 1,  total_price: { $multiply: ["$quantity", 
"$productDetails.price"] }, // Calculate total cost 
order_date: 1 } } ]);

 
7. update the Product collection  
db.Product.updateMany( { _id: { $in: [1, 2, 3] } },  
    { $set: { category: "Electronics" } } 
); 
db.Product.updateMany( { _id: { $in: [4, 5] } },  
    { $set: { category: "Accessories" } } 
); 

//Map Reduce 

db.orders_Souvik.mapReduce(function () {emit(this.category, this.quantity * this.price); },function 
(key, values) {return Array.sum(values); },{out: "total_sales_per_category"}); 
DeprecationWarning: Collection.mapReduce() is deprecated. Use an aggregation instead. 
See https://docs.mongodb.com/manual/core/map-reduce for details. 


//capped
ecommerceDB_Arindam> db.createCollection("logs", { capped: true, size: 1048576, max: 1000 }) 
ecommerceDB_Arindam> while (new Date() - startTime < 180000) {  // 3 minutes 
= 180,000ms 
...     db.logs.insertOne({ 
...         logId: counter, 
...         timestamp: new Date(), 
...         eventType: ["INFO", "WARNING", "ERROR"][Math.floor(Math.random() * 3)], 
...         description: "Log entry " + counter 
...     }); 
...     counter++; 
...     sleep(1000); // Wait for 1 second before inserting the next log 
... } 
ecommerceDB_Arindam> db.logs.count() 
203 
ecommerceDB_Arindam> db.logs.find().sort({ timestamp: -1 }).limit(10)






///Audio file handeling 

from mutagen.mp3 import MP3 
from mutagen.id3 import ID3 
 
audio = MP3("demoML.mp3", ID3=ID3) 
 
print(f"Duration: {audio.info.length: .2f} 
seconds") 
print(f"Bitrate: {audio.info.bitrate} bps") 
 
for tag in audio.tags: 
    print(f"{tag}: {audio[tag]}") 
 
#pygame 
    import pygame 
    pygame.mixer.init() 
    pygame.mixer.music.load('demoML.mp3') 
    pygame.mixer.music.play() 
 
    while pygame.mixer.music.get_busy(): 
        continue

from mutagen.easyid3 import EasyID3 
    audio = EasyID3('demoML.mp3') 
 
    audio["title"] = "YoYo" 
    audio["artist"] = "Aditya Maity" 
    audio["album"] = "PoP Hits" 
    audio.save() 
    print("Metadata Updated Successfully") 
    print(audio.items())  

 
from pydub import AudioSegment 
mp3_file = "nature2.mp3"   
wav_file = "nature2.wav"   
audio = AudioSegment.from_mp3(mp3_file) 
audio.export(wav_file, format="wav") 
print(“Conversion completed”) 
 
import matplotlib.pyplot as plt 
import numpy as np 
from scipy.io import wavfile 

sample_rate, data = 
wavfile.read("nature2.wav") 
time = np.linspace(0, len(data) / sample_rate, 
num=len(data)) 
plt.figure(figsize=(12,4)) 
plt.plot(time, data, label="Audio WaveForm") 
plt.xlabel("Time (seconds)") 
plt.ylabel("Amplitude") 
plt.legend()
plt.show() 


from pydub import AudioSegment 
audio1 = 
AudioSegment.from_mp3("nature.mp3")   
audio2 = 
AudioSegment.from_mp3("nature2.mp3")  
merged_audio = audio1 + audio2   
merged_audio.export("twoaudio.mp3", 
format="mp3") 
print("Merging completed")